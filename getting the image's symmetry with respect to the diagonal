//Converting an array into an image (matrix) in the binary system and getting its symmetry with respect to the diognal
#include <iostream>
#include <new>
using namespace std;
void _swap(double *a,double *b)
{
  double temp = *a;
  *a = *b;
  *b = temp;
}

double** createMatrix(const int n)
{
  double** mat = new double*[n];
  double* arr =  new double[n*n];

  for (int i=0; i<n; i++)
    mat[i] = &arr[i*n];

  return mat;
}

void deleteMatrix(double** &mat)
{
  if (mat != nullptr) 
  {
    delete[] mat[0];
    delete[] mat;
    mat = nullptr;
  }
}

void printMatrix(double** mat,const int n) 
{
  if (mat != nullptr) 
  {
    for (int i=0; i<n; i++) 
    {
      for (int j=0; j<n; j++)
        cout << mat[i][j] << " ";
      cout << endl;
    }
  }
}

double** arrayToMatrix(const int n,int* arr)
{
  double** image = createMatrix(n);

  int k = 0; //filling the matrix: 
  for(int i = 0; i < n; i++)
    for(int j = 0; j < n; j++)
    {
      image[i][j] = arr[k];
      k++;
    }

  return image;
}

void printArray(int* arr,const int n)
{
  cout<<"Array:"<<endl;
  for(int i = 0;i < n*n;i++)
    cout<<arr[i]<<" ";
  cout<<endl;
}

void flipAndInvertImage(double** mat,const int n)
{
  //first step: take the main diognal reverse: 
  for(int i = 0; i < n; i++)
    for(int j = i + 1; j < n; j++)
          _swap(&mat[i][j],&mat[j][i]);

  cout<<endl<<"The diognal reverse:"<<endl;
  printMatrix(mat,n);

  //second step: invert:
  for(int i = 0; i < n; i++)
    for(int j = 0; j < n ; j++)
    {
      if(mat[i][j]==1)
        mat[i][j] = 0;
      else
        mat[i][j] = 1;
    }

  cout<<endl<<"inverted: "<<endl;
  printMatrix(mat,n);
}

int main()
{
  const int n = 4; //It has to be a square matrix to have a diagonal.
  int arr[n*n] = {1,0,0,1,1,0,1,0,0,0,1,0,1,1,1,0};

  printArray(arr,n);

  double** mat = arrayToMatrix(n,arr);

  cout<<"Matrix:"<<endl;
  printMatrix(mat,n);

  flipAndInvertImage(mat,n);

  deleteMatrix(mat);

return 0;
}
